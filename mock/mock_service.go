// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package mock_service is a generated GoMock package.
package mock

import (
	model "bootcamp/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsersService is a mock of IUsersService interface.
type MockIUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockIUsersServiceMockRecorder
}

// MockIUsersServiceMockRecorder is the mock recorder for MockIUsersService.
type MockIUsersServiceMockRecorder struct {
	mock *MockIUsersService
}

// NewMockIUsersService creates a new mock instance.
func NewMockIUsersService(ctrl *gomock.Controller) *MockIUsersService {
	mock := &MockIUsersService{ctrl: ctrl}
	mock.recorder = &MockIUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsersService) EXPECT() *MockIUsersServiceMockRecorder {
	return m.recorder
}

// NewUser mocks base method.
func (m *MockIUsersService) NewUser(arg0 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewUser indicates an expected call of NewUser.
func (mr *MockIUsersServiceMockRecorder) NewUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockIUsersService)(nil).NewUser), arg0)
}

// UpdateUser mocks base method.
func (m *MockIUsersService) UpdateUser(user model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUsersServiceMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUsersService)(nil).UpdateUser), user)
}

// User mocks base method.
func (m *MockIUsersService) User(username string) (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", username)
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockIUsersServiceMockRecorder) User(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockIUsersService)(nil).User), username)
}

// Users mocks base method.
func (m *MockIUsersService) Users() ([]model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].([]model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockIUsersServiceMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockIUsersService)(nil).Users))
}
