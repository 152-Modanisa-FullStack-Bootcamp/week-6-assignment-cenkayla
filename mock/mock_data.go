// Code generated by MockGen. DO NOT EDIT.
// Source: data/data.go

// Package mock_data is a generated GoMock package.
package mock

import (
	model "bootcamp/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsersData is a mock of IUsersData interface.
type MockIUsersData struct {
	ctrl     *gomock.Controller
	recorder *MockIUsersDataMockRecorder
}

// MockIUsersDataMockRecorder is the mock recorder for MockIUsersData.
type MockIUsersDataMockRecorder struct {
	mock *MockIUsersData
}

// NewMockIUsersData creates a new mock instance.
func NewMockIUsersData(ctrl *gomock.Controller) *MockIUsersData {
	mock := &MockIUsersData{ctrl: ctrl}
	mock.recorder = &MockIUsersDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsersData) EXPECT() *MockIUsersDataMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockIUsersData) GetAll() ([]model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIUsersDataMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIUsersData)(nil).GetAll))
}

// GetByUsername mocks base method.
func (m *MockIUsersData) GetByUsername(username string) (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", username)
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockIUsersDataMockRecorder) GetByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockIUsersData)(nil).GetByUsername), username)
}

// Insert mocks base method.
func (m *MockIUsersData) Insert(arg0 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIUsersDataMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIUsersData)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *MockIUsersData) Update(arg0 model.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUsersDataMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsersData)(nil).Update), arg0)
}
